{"version":3,"sources":["index.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","canProcess","idid","id","logSuccess","time","console","log","logError","warn","amount","then","catch"],"mappings":";AA6CE,MAAMA,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChBC,MAAAA,EAAQR,EAA0B,IAAK,KAEtC,OAAA,IAAIS,QAAQ,CAACC,EAASC,KACzBC,WAAW,KAGHC,GAFeV,KAAKE,SAAW,GAEnB,CACRS,MAAAA,GAAQP,EAAYQ,GAAIP,GAC9BE,EAAQI,GAEVH,EAAOJ,EAAYQ,KAElBP,MAILQ,EAAa,CAACD,EAAIE,KACtBC,QAAQC,mBAAmBJ,kBAAmBE,SAG1CG,EAAWL,IACfG,QAAQG,qCAAqCN,+BAG/CT,EAAgB,CAAES,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETd,EAAgB,CAAES,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETd,EAAgB,CAAES,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETd,EAAgB,CAAES,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ","file":"src.06662bed.js","sourceRoot":"../src","sourcesContent":["// // -----------------------------TASK 1\n// const delay = ms => {\n//     return new Promise (resolve => {\n//         setTimeout(() => {\n//             resolve(ms);\n//         }, ms);\n//     });\n// };\n  \n//   const logger = time => console.log(`Resolved after ${time}ms`);\n  \n// //   // Вызовы функции для проверки\n// //   delay(2000).then(logger);\n// //   delay(1000).then(logger); // Resolved after 1000ms\n// //   delay(1500).then(logger); // Resolved after 1500ms\n\n\n// // -----------------------------TASK 2\n//   const users = [\n//     { name: 'Mango', active: true },\n//     { name: 'Poly', active: false },\n//     { name: 'Ajax', active: true },\n//     { name: 'Lux', active: false },\n//   ];\n  \n//   const toggleUserState = (allUsers, userName) => {\n\n//       return new Promise ((resolve, reject) => {\n//         allUsers.map(user => {\n//             if (user.name === userName) {\n//                 resolve({ ...user, active: !user.active })\n//             }\n//             reject(user);\n//         });\n//       });\n//     }\n  \n//   const logger = updatedUsers => console.table(updatedUsers);\n  \n \n//   toggleUserState(users, 'Mango').then(logger);\n//   toggleUserState(users, 'Lux').then(logger);\n\n\n// -----------------------------TASK 3\n  const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n\n            if (canProcess) {\n              const idid = (transaction.id, delay)\n              resolve(idid);\n            }\n            reject(transaction.id);\n            \n          }, delay);\n    })\n  };\n  \n  const logSuccess = (id, time) => {\n    console.log(`Transaction ${id} processed in ${time} ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  makeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);"]}